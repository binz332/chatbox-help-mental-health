const chatBody = document.querySelector(".chat-body")
const messageInput = document.querySelector(".message-input")
const sendMessageButton = document.querySelector("#send-message") 

const API_KEY = "AIzaSyAOdvs43HRJSs5EAAvBJzt0Viq-WlvNH3Q"; 
const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

const userData = {
    message: null
}

// Create message element with dynamic classes and return it
const createMessageElement = (content, ...classes) => {
    const div = document.createElement("div");
    div.classList.add("message", ...classes);
    div.innerHTML = content;
    return div;
}

// Generate bot response using AI
const generateBotResponse = async (incomingMessageDiv) => {
    const messageElement = incomingMessageDiv.querySelector(".message-text");

    // API request options
    const requestOptions = {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            contents: [
                {
                    role: "user",
                    parts: [{
                        text:
        `B·∫°n l√† m·ªôt ng∆∞·ªùi b·∫°n th√¢n thi·ªán, bi·∫øt l·∫Øng nghe v√† lu√¥n ·ªü b√™n ƒë·ªÉ h·ªó tr·ª£ nh·ªØng ng∆∞·ªùi tr·∫ª ƒëang tr·∫£i qua cƒÉng th·∫≥ng, lo √¢u, m·∫•t ƒë·ªông l·ª±c ho·∫∑c g·∫∑p kh√≥ khƒÉn trong cu·ªôc s·ªëng. Gi·ªçng ƒëi·ªáu c·ªßa b·∫°n d·ªãu d√†ng, ch√¢n th√†nh, kh√¥ng ph√°n x√©t, lu√¥n khuy·∫øn kh√≠ch s·ª± chia s·∫ª v√† ƒë·ªìng c·∫£m.

Khi ph·∫£n h·ªìi, h√£y b·∫Øt ƒë·∫ßu b·∫±ng s·ª± ƒë·ªìng c·∫£m v√† c√¥ng nh·∫≠n n·ªó l·ª±c ho·∫∑c c·∫£m x√∫c c·ªßa ng∆∞·ªùi ƒë·ªëi tho·∫°i, sau ƒë√≥ chia s·∫ª m·ªôt l·ªùi khuy√™n nh·∫π nh√†ng, th·ª±c t·∫ø ho·∫∑c m·ªôt g√≥c nh√¨n gi√∫p h·ªç c·∫£m th·∫•y an t√¢m v√† c√≥ ƒë·ªãnh h∆∞·ªõng h∆°n, r·ªìi k·∫øt th√∫c b·∫±ng m·ªôt c√¢u h·ªèi m·ªü ng·∫Øn ho·∫∑c l·ªùi kh√≠ch l·ªá ƒë·ªÉ duy tr√¨ k·∫øt n·ªëi.

H√£y ph·∫£n h·ªìi nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n ƒë√°ng tin c·∫≠y ‚Äì d√πng ng√¥n ng·ªØ ·∫•m √°p, g·ª£i nh·∫Øc s·ª± ƒë·ªìng h√†nh v√† hy v·ªçng, kh√¥ng c·ª©ng nh·∫Øc ho·∫∑c qu√° ‚Äúb√°c sƒ© tr·ªã li·ªáu.‚Äù Th·ªânh tho·∫£ng c√≥ th·ªÉ d√πng emoji ph√π h·ª£p nh∆∞ üíõ, üå±, üòä, nh∆∞ng kh√¥ng l·∫°m d·ª•ng.

Tr√°nh ph·∫£n h·ªìi ch·ªâ b·∫±ng m·ªôt c√¢u h·ªèi ‚ÄúB·∫°n mu·ªën k·ªÉ th√™m kh√¥ng?‚Äù ‚Äì thay v√†o ƒë√≥, h√£y ƒë∆∞a ra nh·ªØng l·ªùi khuy√™n c·ª• th·ªÉ, c√¢u chuy·ªán ƒë·ªìng c·∫£m ho·∫∑c g·ª£i √Ω nh·ªè gi√∫p h·ªç chƒÉm s√≥c b·∫£n th√¢n.

V√≠ d·ª•:

‚ÄúM√¨nh nghe b·∫°n chia s·∫ª nh∆∞ v·∫≠y, ch·∫Øc h·∫≥n b·∫°n ƒë√£ ph·∫£i c·ªë g·∫Øng nhi·ªÅu l·∫Øm r·ªìi üíõ N·∫øu c·∫£m th·∫•y qu√° t·∫£i, b·∫°n c√≥ th·ªÉ th·ª≠ ngh·ªâ m·ªôt ch√∫t, h√≠t th·ªü s√¢u ho·∫∑c ra ngo√†i ƒëi d·∫°o nh·∫π nh√†ng nh√©. M√¨nh tin b·∫°n s·∫Ω t√¨m l·∫°i ƒë∆∞·ª£c s·ª± b√¨nh y√™n t·ª´ng ch√∫t m·ªôt üåø‚Äù

‚ÄúM√¨nh hi·ªÉu ƒëi·ªÅu ƒë√≥ c√≥ th·ªÉ khi·∫øn b·∫°n th·∫•y bu·ªìn v√† m·ªát m·ªèi nhi·ªÅu l·∫Øm üíõ B·∫°n ƒë√£ l√†m r·∫•t t·ªët r·ªìi. N·∫øu mu·ªën, b·∫°n c√≥ th·ªÉ th·ª≠ vi·∫øt ra nh·ªØng ƒëi·ªÅu ƒëang khi·∫øn b·∫°n lo l·∫Øng, ho·∫∑c l√†m m·ªôt ƒëi·ªÅu nh·ªè b·∫°n th√≠ch ƒë·ªÉ n·∫°p l·∫°i nƒÉng l∆∞·ª£ng nh√©. B·∫°n ƒëang mong ch·ªù ƒëi·ªÅu g√¨ trong tu·∫ßn n√†y kh√¥ng?‚Äù`
                    }]
                },
                {
                    role: "user",
                    parts: [{ text: userData.message }]
                }
            ]
        })

    }

    try {
        //Fetch bot response from API
        const response = await fetch(API_URL, requestOptions);
        const data = await response.json();
        if (!response.ok) throw new Error(data.error.message);

        //Extract and display bot's response text
        const apiResponseText = data.candidates[0].content.parts[0].text.replace(/\*\*(.*?)\*\*/g, "$1").trim();
        messageElement.innerText = apiResponseText;
    } catch (error) {
        console.error("L·ªói khi t·∫°o ph·∫£n h·ªìi c·ªßa bot:", error); 
        messageElement.innerText = "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.";
    } finally {
        incomingMessageDiv.classList.remove("thinking");
    }
}

// Handle outgoing user messages
const handOutgoingMessage = (e = null) => {
    if (e) {
        e.preventDefault();
    }

    const userMessage = messageInput.value.trim();
    if (!userMessage) return; // Kh√¥ng g·ª≠i tin nh·∫Øn r·ªóng

    userData.message = userMessage;
    messageInput.value = ""; // X√≥a n·ªôi dung input sau khi g·ª≠i

    // Create and display user message
    const outgoingMessageDiv = createMessageElement(`<div class = "message-text">${userData.message}</div>`, "user-message");
    chatBody.appendChild(outgoingMessageDiv);
    chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });

    // Simulate bot response with thinking indicator after a delay
    setTimeout(() => {
        const messageContent = `<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 1024 1024">
            <path d="M738.3 287.6H285.7c-59 0-106.8 47.8-106.8 106.8v303.1c0 59 47.8 106.8 106.8 106.8h81.5v111.1c0 .7.8 1.1 1.4.7l166.9-110.6 41.8-.8h117.4l43.6-.4c59 0 106.8-47.8 106.8-106.8V394.5c0-59-47.8-106.9-106.8-106.9zM351.7 448.2c0-29.5 23.9-53.5 53.5-53.5s53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5-53.5-23.9-53.5-53.5zm157.9 267.1c-67.8 0-123.8-47.5-132.3-109h264.6c-8.6 61.5-64.5 109-132.3 109zm110-213.7c-29.5 0-53.5-23.9-53.5-53.5s23.9-53.5 53.5-53.5 53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5zM867.2 644.5V453.1h26.5c19.4 0 35.1 15.7 35.1 35.1v121.1c0 19.4-15.7 35.1-35.1 35.1h-26.5zM95.2 609.4V488.2c0-19.4 15.7-35.1 35.1-35.1h26.5v191.3h-26.5c-19.4 0-35.1-15.7-35.1-35.1zM561.5 149.6c0 23.4-15.6 43.3-36.9 49.7v44.9h-30v-44.9c-21.4-6.5-36.9-26.3-36.9-49.7 0-28.6 23.3-51.9 51.9-51.9s51.9 23.3 51.9 51.9z"></path>
        </svg>
        <div class="message-text">
            <div class = "thinking-indicator">
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
            </div>
        </div>`;

        const incomingMessageDiv = createMessageElement(messageContent, "bot-message", "thinking");
        chatBody.appendChild(incomingMessageDiv);
        generateBotResponse(incomingMessageDiv); 
    }, 600);
}

// Handle Enter keypress for sending messages
messageInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter" && !e.shiftKey) { 
        e.preventDefault(); 
        handOutgoingMessage(); 
    }
});

sendMessageButton.addEventListener("click", handOutgoingMessage); 

messageInput.addEventListener("focus", () => {
    setTimeout(() => {
        chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });
    }, 300);
});
